// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TruvSDKFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import Foundation
import SafariServices
import Swift
@_exported import TruvSDKFramework
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct TruvEmployer : Swift.Codable {
  public let name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TruvBridgeController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(token: Swift.String, delegate: (any TruvSDKFramework.TruvDelegate)? = nil, config: TruvSDKFramework.TruvSDKConfig = .default)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
public struct TruvSuccessPayload : Swift.Codable {
  public let publicToken: Swift.String
  public let metadata: TruvSDKFramework.TruvSuccessPayload.Metadata
  public struct Metadata : Swift.Codable {
    public let taskId: Swift.String
    public let employer: TruvSDKFramework.TruvEmployer?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TruvEvent : Swift.Encodable {
  case onClose
  case onError
  case onEvent(TruvSDKFramework.TruvEventPayload?)
  case onLoad
  case onSuccess(TruvSDKFramework.TruvSuccessPayload?)
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TruvBridgeView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(token: Swift.String, delegate: (any TruvSDKFramework.TruvDelegate)? = nil, config: TruvSDKFramework.TruvSDKConfig = .default)
  @objc deinit
}
extension TruvSDKFramework.TruvBridgeView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension TruvSDKFramework.TruvBridgeView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
public protocol TruvDelegate : AnyObject {
  func onEvent(_ event: TruvSDKFramework.TruvEvent)
}
public struct TruvEventPayload : Swift.Codable {
  public let payload: TruvSDKFramework.TruvEventPayload.Payload?
  public let eventType: TruvSDKFramework.TruvEventPayload.EventType
  public struct Payload : Swift.Codable {
    public let bridgeToken: Swift.String?
    public let productType: Swift.String?
    public let viewName: Swift.String?
    public let employer: TruvSDKFramework.TruvEmployer?
    public let publicToken: Swift.String?
    public let taskId: Swift.String?
    public let providerId: Swift.String?
    public let error: TruvSDKFramework.TruvError?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum EventType : Swift.String, Swift.Codable {
    case load
    case open
    case screenView
    case employerSelected
    case linkCreated
    case loginComplete
    case success
    case error
    case unsupportedBrowser
    case close
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TruvError : Swift.Codable {
  public let type: TruvSDKFramework.TruvError.ErrorType
  public let code: TruvSDKFramework.TruvError.ErrorCode
  public let message: Swift.String
  public enum ErrorType : Swift.String, Swift.Codable {
    case link
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ErrorCode : Swift.String, Swift.Codable {
    case noData
    case unavailable
    case mfaError
    case loginError
    case error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TruvPlatform {
  case native
  case reactNative(sdkVersion: Swift.String)
  case flutter(sdkVersion: Swift.String)
}
public struct TruvSDKConfig {
  public let baseURL: Swift.String
  public let isDebug: Swift.Bool
  public let platform: TruvSDKFramework.TruvPlatform
  public init(baseURL: Swift.String, isDebug: Swift.Bool = false, platform: TruvSDKFramework.TruvPlatform = .native)
  public static var `default`: TruvSDKFramework.TruvSDKConfig
}
public enum TruvEventType : Swift.String {
  case onClose
  case onError
  case onEvent
  case onLoad
  case onSuccess
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension TruvSDKFramework.TruvEventPayload.EventType : Swift.Equatable {}
extension TruvSDKFramework.TruvEventPayload.EventType : Swift.Hashable {}
extension TruvSDKFramework.TruvEventPayload.EventType : Swift.RawRepresentable {}
extension TruvSDKFramework.TruvError.ErrorType : Swift.Equatable {}
extension TruvSDKFramework.TruvError.ErrorType : Swift.Hashable {}
extension TruvSDKFramework.TruvError.ErrorType : Swift.RawRepresentable {}
extension TruvSDKFramework.TruvError.ErrorCode : Swift.Equatable {}
extension TruvSDKFramework.TruvError.ErrorCode : Swift.Hashable {}
extension TruvSDKFramework.TruvError.ErrorCode : Swift.RawRepresentable {}
extension TruvSDKFramework.TruvEventType : Swift.Equatable {}
extension TruvSDKFramework.TruvEventType : Swift.Hashable {}
extension TruvSDKFramework.TruvEventType : Swift.RawRepresentable {}
